[gd_scene load_steps=20 format=2]

[ext_resource path="res://NPC.gd" type="Script" id=1]
[ext_resource path="res://Interactive_Object.tscn" type="PackedScene" id=2]
[ext_resource path="res://Interactive_Object_Press.tscn" type="PackedScene" id=3]
[ext_resource path="res://Art_Assets/EveryoneIdle.png" type="Texture" id=4]
[ext_resource path="res://NPC States/Idle_Sprite.gd" type="Script" id=5]
[ext_resource path="res://Art_Assets/CharacterSprites.png" type="Texture" id=6]
[ext_resource path="res://NPC States/States.gd" type="Script" id=7]
[ext_resource path="res://NPC States/Idle.gd" type="Script" id=8]
[ext_resource path="res://NPC States/Walk.gd" type="Script" id=9]
[ext_resource path="res://NPC States/Special.gd" type="Script" id=10]
[ext_resource path="res://NPC States/StateTimer.gd" type="Script" id=11]

[sub_resource type="RectangleShape2D" id=1]

custom_solver_bias = 0.0
extents = Vector2( 7.81754, 26.0793 )

[sub_resource type="RectangleShape2D" id=2]

custom_solver_bias = 0.0
extents = Vector2( 26.4498, 10 )

[sub_resource type="RectangleShape2D" id=3]

custom_solver_bias = 0.0
extents = Vector2( 10, 10 )

[sub_resource type="Shader" id=4]

code = "shader_type canvas_item;
render_mode unshaded;
uniform float happiness_scale;

void fragment() {
COLOR = texture(TEXTURE, UV);//setup the default image 
float lum = dot(COLOR.rgb, vec3(.3, .59, .11));//get the average
vec3 test = mix(COLOR.rgb, vec3(lum), happiness_scale); 
COLOR.xyz = vec3(test);//set the average to get grayscale 
}"

[sub_resource type="ShaderMaterial" id=5]

render_priority = 0
shader = SubResource( 4 )
shader_param/happiness_scale = 0.0
_sections_unfolded = [ "shader_param" ]

[sub_resource type="Animation" id=6]

length = 4.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("../Idle:offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ Vector2( 0, 0 ), Vector2( 0, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../Idle:region_rect")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1, 2, 3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ Rect2( 9, 200, 16, 64 ), Rect2( 29, 200, 16, 64 ), Rect2( 52, 201, 16, 63 ), Rect2( 78, 202, 16, 62 ) ]
}
tracks/2/type = "method"
tracks/2/path = NodePath("../States")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 4 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "handle_anim"
} ]
}

[sub_resource type="Animation" id=7]

length = 1.0
loop = false
step = 0.1

[sub_resource type="Animation" id=8]

length = 1.0
loop = false
step = 0.1

[node name="NPC" type="KinematicBody2D"]

position = Vector2( 274.249, 164.128 )
z_index = 1
input_pickable = false
collision_layer = 2
collision_mask = 2
collision/safe_margin = 0.08
script = ExtResource( 1 )
_sections_unfolded = [ "Collision", "Material", "Pickable", "Z Index" ]
__meta__ = {
"_edit_group_": true
}
mini_game = null
happiness = 0.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="." index="0"]

position = Vector2( 0.443197, 0 )
scale = Vector2( 0.965908, 1 )
shape = SubResource( 1 )

[node name="IO" parent="." index="1" instance=ExtResource( 2 )]

position = Vector2( 5.11132, 0 )
scale = Vector2( 2.75046, 1 )
player_path = NodePath("..")

[node name="CollisionShape2D" parent="IO" index="0"]

scale = Vector2( 1.0777, 2.32584 )
shape = SubResource( 2 )
_sections_unfolded = [ "Transform" ]

[node name="IOP" parent="." index="2" instance=ExtResource( 3 )]

position = Vector2( 5.29251, 0 )
scale = Vector2( 2.41527, 1 )
player_path = NodePath("..")

[node name="CollisionShape2D" parent="IOP" index="0"]

scale = Vector2( 1.98176, 2.15703 )
shape = SubResource( 3 )
_sections_unfolded = [ "Transform" ]

[node name="Idle" type="Sprite" parent="." index="3"]

material = SubResource( 5 )
position = Vector2( -0.0231934, -1.16441 )
scale = Vector2( 0.8, 0.8 )
texture = ExtResource( 4 )
offset = Vector2( 0, 1 )
region_enabled = true
region_rect = Rect2( 78, 202, 16, 62 )
script = ExtResource( 5 )
_sections_unfolded = [ "Animation", "Material", "Offset", "Region", "Transform", "Visibility" ]

[node name="NPCSprite" type="Sprite" parent="." index="4"]

visible = false
scale = Vector2( 0.8, 0.8 )
texture = ExtResource( 6 )
region_enabled = true
region_rect = Rect2( 216, 7.5, 16, 63 )
_sections_unfolded = [ "Material", "Region", "Transform", "Visibility", "Z Index" ]
__meta__ = {
"_edit_group_": true
}

[node name="Animations" type="AnimationPlayer" parent="NPCSprite" index="0"]

root_node = NodePath("..")
autoplay = ""
playback_process_mode = 1
playback_default_blend_time = 0.0
playback_speed = 2.0
"anims/Idle Animation" = SubResource( 6 )
"anims/Special Animation" = SubResource( 7 )
"anims/Walk Cycle" = SubResource( 8 )
blend_times = [  ]
_sections_unfolded = [ "Playback Options" ]

[node name="States" type="Node" parent="." index="5"]

script = ExtResource( 7 )

[node name="Idle" type="Node" parent="States" index="0"]

script = ExtResource( 8 )
MIN_TIME = 4
MAX_TIME = 12

[node name="Walk" type="Node" parent="States" index="1"]

script = ExtResource( 9 )
MIN_TIME = 4
MAX_TIME = 12

[node name="Special" type="Node" parent="States" index="2"]

script = ExtResource( 10 )
MIN_TIME = 4
MAX_TIME = 12

[node name="StateTimer" type="Timer" parent="States" index="3"]

process_mode = 1
wait_time = 1.5
one_shot = true
autostart = false
script = ExtResource( 11 )

[node name="MovementTimer" type="Timer" parent="." index="6"]

process_mode = 1
wait_time = 1.0
one_shot = true
autostart = false

[connection signal="activated" from="IO" to="." method="_on_Interactive_Object_activated"]

[connection signal="exited" from="IO" to="." method="_on_IO_exited"]

[connection signal="timeout" from="States/StateTimer" to="States/StateTimer" method="_on_StateTimer_timeout"]

[connection signal="timeout" from="MovementTimer" to="States/Walk" method="_on_MovementTimer_timeout"]


[editable path="IO"]
[editable path="IOP"]
